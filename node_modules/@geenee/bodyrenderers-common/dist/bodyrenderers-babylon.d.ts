import { Coord2D, PosePoint, Coord3D } from '@geenee/bodytracking';
import { ShaderProgram, Size, VideoPlugin } from '@geenee/armature';
import { PoseResult, FaceResult } from '@geenee/bodyprocessors';

/** List of skeleton bone names */
declare const BoneList: readonly ["hips", "spine", "spine1", "spine2", "neck", "head", "headEnd", "shoulderL", "shoulderR", "armL", "armR", "foreArmL", "foreArmR", "handL", "handR", "upLegL", "upLegR", "legL", "legR", "footL", "footR", "toeL", "toeR"];
/** Union type of skeleton bone name */
declare type BoneName = typeof BoneList[number];
/**
 * Map of skeleton bones
 *
 * Object with properties corresponding to
 * each {@link BoneList | bone} of skeleton.
 *
 * @typeParam T - Type of map values
 * */
declare type SkeletonMap<T> = {
    [key in BoneName]: T;
};
/**
 * Mapping of skeleton
 *
 * Creates a {@link SkeletonMap | map object} where values of
 * properties corresponding to each {@link BoneList | bone}
 * of skeleton are evaluated by provided mapping function.
 *
 * @param mapFn - Function mapping bone to a value
 * @typeParam T - Type of map object values
 * @returns Map object of skeleton bones
 */
declare function mapSkeleton<T>(mapFn: (b: BoneName) => T): SkeletonMap<T>;
/** Shape of spine
 *
 * Used by {@link PoseAlignPlugin} internally
 * to fine-tune curvature of spine skeleton.
 */
interface SpineCurve {
    hips: Coord2D;
    spine: Coord2D;
    spine1: Coord2D;
    spine2: Coord2D;
    head: Coord2D;
}
/**
 * Parameters of pose fine-tuning
 *
 * These parameters control optional adjustments added to basic
 * pose-model alignment method. {@link PoseAlignPlugin} supports
 * rigs compatible with Mixamo armature (Ready Player Me avatars).
 * This is the most common armature standard for human-like models,
 * supported by many game engines. But for example models rigged
 * and skinned manually or using Mixamo tool can variate depending
 * on anthropomorphous model topology, e.g. animated characters
 * can have disproportional body parts like a much bigger head.
 * In such cases fine-tuning may be required. Also depending on
 * use case you can try several options and see what works better.
 * As an example turning off adjustment of spine curvature gives
 * better results in virtual garment try-on experiences, while for
 * full-body avatar overlaying it can provide more natural look.
 */
interface PoseTuneParams {
    /**
     * Pose plugin can adjust estimated spine skeleton resembling
     * curvature of model's spine in rest (default) pose. In other
     * words it slightly modifies bone positions and rotations to
     * mimic spine curve. Parameter is a number, usually in range
     * [0..1]. 0 or undefined means spine of the rig will remain
     * flat (default estimation), while 1 - rig's curvature is
     * projected completely. Values in between control strength
     * of curvature and values bigger than 1.0 will amplify it.
     */
    spineCurve?: number;
    /**
     * In some cases it can be useful to adjust positions of
     * shoulders making them slightly wider, higher or deeper.
     * This adjustment helps to adapt model to proportions of
     * human body or to make sure body is completely covered.
     * `shoulderDX` adjusts width of shoulders, it's shift in
     * meters, we recommend values of 0.01 order of magnitude.
     * Default value is 0 meaning shoulders are not adjusted.
     */
    shoulderDX?: number;
    /**
     * In some cases it can be useful to adjust positions of
     * shoulders making them slightly wider, higher or deeper.
     * This adjustment helps to adapt model to proportions of
     * human body or to make sure body is completely covered.
     * `shoulderDY` adjusts height of shoulders, it's shift in
     * meters, we recommend values of 0.01 order of magnitude.
     * Default value is 0 meaning shoulders are not adjusted.
     */
    shoulderDY?: number;
    /**
     * In some cases it can be useful to adjust positions of
     * shoulders making them slightly wider, higher or deeper.
     * This adjustment helps to adapt model to proportions of
     * human body or to make sure body is completely covered.
     * `shoulderDZ` adjusts depth of shoulders, it's shift in
     * meters, we recommend values of 0.01 order of magnitude.
     * Default value is 0 meaning shoulders are not adjusted.
     */
    shoulderDZ?: number;
    /**
     * In many models head of shoulder's bone doesn't coincide
     * with tail of the parent. This parameter defines distance
     * from head of the neck bone to head of the shoulder bone
     * ratio to distance to tail of shoulder. Value should be
     * in range [0..1], default value for most models is 0.2
     */
    shoulderOffset?: number;
    /**
     * Distance between center of the head defined by midpoint
     * of ears and position of the head bone (its start) ratio
     * to overall length of head bone. Relative lengths of neck
     * and head bones vary a lot between human-like models. It
     * is not possible to automatically find where ears or the
     * model's mesh are so this value provides a way to define it.
     * Recommended range is [0.3 .. 0.5], default value is 0.35
     * that close to topology of all Ready Player Me avatars.
     */
    headRatio?: number;
    /**
     * Advanced adjustment of the neck bone. Naturally base of
     * a neck is not exactly center between shoulders, it shifts
     * depending on direction of shoulder bones. This parameter
     * defines magnitude of this shift in meters. Recommended
     * values are 0.01 order of magnitude. Default is undefined.
     */
    neckAdjust?: number;
}
/**
 * Outfit options
 *
 * Defines occluder and hidden meshes of the node.
 * Names of meshes are provided as strings or regex.
 * If name of a child mesh equals string or matches
 * regex it's assigned the corresponding type. All
 * other meshes are assumed to be visible as usual.
 */
interface OutfitParams {
    /** Occluder meshes */
    occluders?: (string | RegExp)[];
    /** Hidden meshes */
    hidden?: (string | RegExp)[];
}

/**
 * Image dilation shader
 *
 * Specialization of {@link ShaderProgram}
 * performing dilation operation on image.
 */
declare class DilationShader extends ShaderProgram {
    /**
     * Constructor
     *
     * @param gl - WebGL context where program is instantiated
     * @param size - Size of processed (input & output) image
     * @param radius - Dilation operation radius
     */
    constructor(gl: WebGL2RenderingContext, size: Size, radius?: number);
}

declare class PoseDebugPlugin extends VideoPlugin<PoseResult> {
    update(result: PoseResult, stream: HTMLCanvasElement): Promise<void>;
    protected drawPath(videoCtx: CanvasRenderingContext2D, width: number, height: number, points: PosePoint[], close?: boolean): void;
}

declare class FaceDebugPlugin extends VideoPlugin<FaceResult> {
    update(result: FaceResult, stream: HTMLCanvasElement): Promise<void>;
    protected drawPath(videoCtx: CanvasRenderingContext2D, points: Coord3D[], close?: boolean): void;
}

export { BoneList, BoneName, DilationShader, FaceDebugPlugin, OutfitParams, PoseDebugPlugin, PoseTuneParams, SkeletonMap, SpineCurve, mapSkeleton };
